// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use environment variables for security
const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLIC_KEY;

// Validate environment variables
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  throw new Error('Supabase configuration is missing. Please check your environment variables.');
}

// Create the Supabase client with optimized configuration
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'pkce'
    },
    global: {
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    },
    db: {
      schema: 'public'
    }
  }
);

// Add enhanced error handling for Supabase requests
const originalFrom = supabase.from;
supabase.from = function(table) {
  const query = originalFrom.call(this, table);
  
  // Add error handling to select queries
  const originalSelect = query.select;
  query.select = function(...args) {
    const selectQuery = originalSelect.apply(this, args);
    
    // Add error handling to the execution
    const originalThen = selectQuery.then;
    selectQuery.then = function(onFulfilled, onRejected) {
      return originalThen.call(
        this,
        (result) => {
          if (result.error) {
            // Only log non-PGRST116 errors (PGRST116 is "no rows found" which is expected)
            if (result.error.code !== 'PGRST116') {
              console.error(`Supabase query error for ${table}:`, result.error);
            }
          }
          return onFulfilled ? onFulfilled(result) : result;
        },
        onRejected
      );
    };
    
    return selectQuery;
  };
  
  // Add error handling to insert queries
  const originalInsert = query.insert;
  query.insert = function(...args) {
    const insertQuery = originalInsert.apply(this, args);
    
    const originalThen = insertQuery.then;
    insertQuery.then = function(onFulfilled, onRejected) {
      return originalThen.call(
        this,
        (result) => {
          if (result.error) {
            console.error(`Supabase insert error for ${table}:`, result.error);
          }
          return onFulfilled ? onFulfilled(result) : result;
        },
        onRejected
      );
    };
    
    return insertQuery;
  };
  
  // Add error handling to update queries
  const originalUpdate = query.update;
  query.update = function(...args) {
    const updateQuery = originalUpdate.apply(this, args);
    
    const originalThen = updateQuery.then;
    updateQuery.then = function(onFulfilled, onRejected) {
      return originalThen.call(
        this,
        (result) => {
          if (result.error) {
            console.error(`Supabase update error for ${table}:`, result.error);
          }
          return onFulfilled ? onFulfilled(result) : result;
        },
        onRejected
      );
    };
    
    return updateQuery;
  };
  
  return query;
};